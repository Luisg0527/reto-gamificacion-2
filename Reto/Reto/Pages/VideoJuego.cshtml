@page
@model VideoJuegoModel
@{
    ViewData["Title"] = "VideoJuego";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Reto</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Reto.styles.css" asp-append-version="true" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap" rel="stylesheet">
</head>

<body>
    @* aqui *@
    <div id="unity-container" class="unity-desktop">
      <canvas id="unity-canvas" width=960 height=600 tabindex="-1"></canvas>
      <div id="unity-loading-bar">
        <div id="unity-logo"></div>
        <div id="unity-progress-bar-empty">
          <div id="unity-progress-bar-full"></div>
        </div>
      </div>
      <div id="unity-warning"> </div>
      <div id="unity-footer">
        <div id="unity-logo-title-footer"></div>
        <div id="unity-fullscreen-button"></div>
        <div id="unity-build-title">PuntoDeVenta</div>
      </div>
    </div>
    <script>
      var canvas = document.querySelector("#unity-canvas");

      // Shows a temporary message banner/ribbon for a few seconds, or
      // a permanent error message on top of the canvas if type=='error'.
      // If type=='warning', a yellow highlight color is used.
      // Modify or remove this function to customize the visually presented
      // way that non-critical warnings and error messages are presented to the
      // user.
      function unityShowBanner(msg, type) {
        var warningBanner = document.querySelector("#unity-warning");
        function updateBannerVisibility() {
          warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') div.style = 'background: red; padding: 10px;';
        else {
          if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
          setTimeout(function() {
            warningBanner.removeChild(div);
            updateBannerVisibility();
          }, 5000);
        }
        updateBannerVisibility();
      }

      var buildUrl = "VJFINAL2/Build";
      var loaderUrl = buildUrl + "/VJFINAL2.loader.js";
      var config = {
        arguments: [],
        dataUrl: buildUrl + "/VJFINAL2.data",
        frameworkUrl: buildUrl + "/VJFINAL2.framework.js",
        codeUrl: buildUrl + "/VJFINAL2.wasm",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "DefaultCompany",
        productName: "PuntoDeVenta",
        productVersion: "1.0",
        showBanner: unityShowBanner,
      };

      // By default, Unity keeps WebGL canvas render target size matched with
      // the DOM size of the canvas element (scaled by window.devicePixelRatio)
      // Set this to false if you want to decouple this synchronization from
      // happening inside the engine, and you would instead like to size up
      // the canvas DOM size and WebGL render target sizes yourself.
      // config.matchWebGLToCanvasSize = false;

      // If you would like all file writes inside Unity Application.persistentDataPath
      // directory to automatically persist so that the contents are remembered when
      // the user revisits the site the next time, uncomment the following line:
      // config.autoSyncPersistentDataPath = true;
      // This autosyncing is currently not the default behavior to avoid regressing
      // existing user projects that might rely on the earlier manual
      // JS_FileSystem_Sync() behavior, but in future Unity version, this will be
      // expected to change.

      if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        // Mobile device style: fill the whole browser client area with the game canvas:

        var meta = document.createElement('meta');
        meta.name = 'viewport';
        meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
        document.getElementsByTagName('head')[0].appendChild(meta);
        document.querySelector("#unity-container").className = "unity-mobile";
        canvas.className = "unity-mobile";

        // To lower canvas resolution on mobile devices to gain some
        // performance, uncomment the following line:
        // config.devicePixelRatio = 1;


      } else {
        // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:
        canvas.style.width = "960px";
        canvas.style.height = "600px";
      }

      document.querySelector("#unity-loading-bar").style.display = "block";

      var script = document.createElement("script");
      script.src = loaderUrl;
      script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
          document.querySelector("#unity-progress-bar-full").style.width = 100 * progress + "%";
              }).then((unityInstance) => {
                document.querySelector("#unity-loading-bar").style.display = "none";
                document.querySelector("#unity-fullscreen-button").onclick = () => {
                  unityInstance.SetFullscreen(1);
                };

              }).catch((message) => {
                alert(message);
              });
            };

      document.body.appendChild(script);

    </script>
    @* aqui *@
    <div id="videojuegos-container">
        @foreach (Videojuego element in Model.Videojuego)
        {
            <br>
            <div class="videojuego-box">
                <h1>@element.Nombre</h1>
                <p>@element.Descripcion</p>
                <br />
                <p>@element.Historia</p>

                <h3>Controles</h3>
                <ul>
                    @foreach (var control in Model.Controles)
                    {
                        if (control.VideojuegoId == element.Id)
                        {
                            <li>
                                <strong>@control.Accion:</strong> @control.Tecla
                            </li>
                        }
                    }
                </ul>

                <h3>Objetivos</h3>

                @if (Model.Objetivo.Count(obj => obj.VideojuegoId == element.Id && obj.Tipo == "ganar") > 0)
                {
                    <p>Cómo ganar</p>
                    <ul>
                        @foreach (Objetivo obj in Model.Objetivo)
                        {
                            if (obj.VideojuegoId == element.Id && obj.Tipo == "ganar")
                            {
                                <li>@obj.Descripcion</li>
                            }
                        }
                    </ul>
                }
                
                 @if (Model.Objetivo.Count(obj => obj.VideojuegoId == element.Id && obj.Tipo == "perder") > 0)
                {
                    <p>Cómo perder</p>
                    <ul>
                        @foreach (Objetivo obj in Model.Objetivo)
                        {
                            if (obj.VideojuegoId == element.Id && obj.Tipo == "perder")
                            {
                                <li>@obj.Descripcion</li>
                            }
                        }
                    </ul>
                }

                <h3>Créditos</h3>
                <ul>
                    @foreach (var c_element in Model.Creditos)
                    {
                        if (c_element.VideojuegoId == element.Id)
                        {
                            <li>
                                <strong>@c_element.NombrePersona:</strong> @c_element.Rol
                            </li>
                        }
                    }
                </ul>
            </div>
        }
    </div>
    <br>
    <div id="licencias-container">
        <h1>Licencias</h1>

        <h3>Imagen</h3>
        <ul>
            @foreach (var l_element in Model.Licencias)
            {
                if (l_element.Tipo == "imagen")
                {
                    <li>
                        <strong>@l_element.NombreRecurso:</strong> @l_element.Atribucion, @l_element.FuenteUrl
                    </li>
                }
            }
        </ul>

        <h3>Sonido</h3>
        <ul>
            @foreach (var l_element in Model.Licencias)
            {
                if (l_element.Tipo == "sonido")
                {
                    <li>
                        <strong>@l_element.NombreRecurso:</strong> @l_element.Atribucion, @l_element.FuenteUrl
                    </li>
                }
            }
        </ul>
    </div>


</body>